From 51f23309163a58fd53698d36b27f478848687d12 Mon Sep 17 00:00:00 2001
From: Matt Rogers <mrogers@redhat.com>
Date: Thu, 25 Feb 2016 10:38:07 -0500
Subject: [PATCH 1/2] Fix kprop and kpropd realm handling

Add the sn2princ_with_realm() helper function (currently duplicated in
kprop.c and kpropd.c) to simplify principal realm substitution.  Use
sn2princ_with_realm() in kprop.c and kpropd.c in place of
krb5_sname_to_principal(), with the default realm if -r is not provided.
If a realm is given to kpropd, set it as the default realm on the
kpropd_context, allowing a later call of ulog_replay() to open the
correct database.

Remove referral realm code in kprop.c and kpropd.c.  Pass the realm
(default or provided) to the kdb5_util and kprop commands called by
kadmind.

ticket: 8277
(cherry picked from commit 0e7b4c901bf475f61b74ca56363089906e324272)
[rharwood@redhat.com: don't even pretend this is clean]
---
 src/kadmin/server/ipropd_svc.c |  17 +++----
 src/slave/kprop.c              |  90 ++++++++++++++++++----------------
 src/slave/kpropd.c             | 106 ++++++++++++++++++++++-------------------
 3 files changed, 117 insertions(+), 96 deletions(-)

diff --git a/src/kadmin/server/ipropd_svc.c b/src/kadmin/server/ipropd_svc.c
index be67d13..f8d75d4 100644
--- a/src/kadmin/server/ipropd_svc.c
+++ b/src/kadmin/server/ipropd_svc.c
@@ -327,8 +327,8 @@ ipropx_resync(uint32_t vers, struct svc_req *rqstp)
      * versioned (-i0 for legacy dump format, -i1 for ipropx
      * version 1 format, etc)
      */
-    if (asprintf(&ubuf, "%s dump -i%d %s </dev/null 2>&1",
-		 KPROPD_DEFAULT_KDB5_UTIL, vers, tmpf) < 0) {
+    if (asprintf(&ubuf, "%s -r %s dump -i%d %s </dev/null 2>&1",
+                 KPROPD_DEFAULT_KDB5_UTIL, handle->params.realm, vers, tmpf) < 0) {
 	krb5_klog_syslog(LOG_ERR,
 			 _("%s: cannot construct kdb5 util dump string too long; out of memory"),
 			 whoami);
@@ -375,16 +375,17 @@ ipropx_resync(uint32_t vers, struct svc_req *rqstp)
 	    _exit(1);
 	}
 
-	DPRINT(("%s: exec `kprop -f %s %s' ...\n",
-		whoami, tmpf, clhost));
+
+	DPRINT(("%s: exec `kprop -r %s -f %s %s' ...\n",
+		handle->params.realm, whoami, tmpf, clhost));
 	/* XXX Yuck!  */
 	if (getenv("KPROP_PORT"))
-	    pret = execl(KPROPD_DEFAULT_KPROP, "kprop", "-f", tmpf,
-			 "-P", getenv("KPROP_PORT"),
+            pret = execl(KPROPD_DEFAULT_KPROP, "kprop", "-r", handle->params.realm, "-f",
+                         tmpf, "-P", getenv("KPROP_PORT"),
 			 clhost, NULL);
 	else
-	    pret = execl(KPROPD_DEFAULT_KPROP, "kprop", "-f", tmpf,
-			 clhost, NULL);
+            pret = execl(KPROPD_DEFAULT_KPROP, "kprop", "-r", handle->params.realm, "-f",
+                         tmpf, clhost, NULL);
 	if (pret == -1) {
 	    if (nofork) {
 		perror(whoami);
diff --git a/src/slave/kprop.c b/src/slave/kprop.c
index cfb8092..af8d013 100644
--- a/src/slave/kprop.c
+++ b/src/slave/kprop.c
@@ -55,6 +55,7 @@ int     debug = 0;
 char    *srvtab = 0;
 char    *slave_host;
 char    *realm = 0;
+char    *def_realm = NULL;
 char    *file = KPROP_DEFAULT_FILE;
 
 krb5_principal  my_principal;           /* The Kerberos principal we'll be */
@@ -66,7 +67,7 @@ krb5_address    *sender_addr;
 krb5_address    *receiver_addr;
 const char      *port = KPROP_SERVICE;
 
-void    PRS(int, char **);
+void    PRS(krb5_context, int, char **);
 void    get_tickets(krb5_context);
 static void usage(void);
 static void open_connection(krb5_context, char *, int *);
@@ -103,7 +104,7 @@ main(argc, argv)
         com_err(argv[0], retval, _("while initializing krb5"));
         exit(1);
     }
-    PRS(argc, argv);
+    PRS(context,argc, argv);
     get_tickets(context);
 
     database_fd = open_database(context, file, &database_size);
@@ -116,14 +117,17 @@ main(argc, argv)
     printf(_("Database propagation to %s: SUCCEEDED\n"), slave_host);
     krb5_free_cred_contents(context, my_creds);
     close_database(context, database_fd);
+    krb5_free_default_realm(context, def_realm);
     exit(0);
 }
 
-void PRS(argc, argv)
+void PRS(context, argc, argv)
+    krb5_context context;
     int     argc;
     char    **argv;
 {
     register char   *word, ch;
+    krb5_error_code ret;
 
     progname = *argv++;
     while (--argc && (word = *argv++)) {
@@ -181,47 +185,62 @@ void PRS(argc, argv)
     }
     if (!slave_host)
         usage();
+
+    if (realm == NULL) {
+        ret = krb5_get_default_realm(context, &def_realm);
+        if (ret) {
+            com_err(progname, errno, _("while getting default realm"));
+            exit(1);
+        }
+        realm = def_realm;
+    }
+}
+
+/* Runs krb5_sname_to_principal with a substitute realm
+ * Duplicated in kpropd.c, sharing TBD */
+static krb5_error_code
+sn2princ_with_realm(krb5_context context, const char *hostname,
+                    const char *sname, krb5_int32 type, const char *rrealm,
+                    krb5_principal *princ_out)
+{
+    krb5_error_code ret;
+    krb5_principal princ = NULL;
+
+    *princ_out = NULL;
+
+    if (rrealm == NULL)
+        return EINVAL;
+
+    ret = krb5_sname_to_principal(context, hostname, sname, type, &princ);
+    if (ret)
+        return ret;
+
+    ret = krb5_set_principal_realm(context, princ, rrealm);
+    if (ret) {
+        krb5_free_principal(context, princ);
+        return ret;
+    }
+
+    *princ_out = princ;
+    return 0;
 }
 
 void get_tickets(context)
     krb5_context context;
 {
-    char buf[] = "MEMORY:_kproptkt", *def_realm;
+    char buf[] = "MEMORY:_kproptkt";
     krb5_error_code retval;
     krb5_keytab keytab = NULL;
 
     /*
      * Figure out what tickets we'll be using to send stuff
      */
-    retval = krb5_sname_to_principal(context, NULL, NULL,
-                                     KRB5_NT_SRV_HST, &my_principal);
+    retval = sn2princ_with_realm(context, NULL, NULL, KRB5_NT_SRV_HST, realm,
+                                 &my_principal);
     if (retval) {
         com_err(progname, errno, _("while setting client principal name"));
         exit(1);
     }
-    if (realm) {
-        retval = krb5_set_principal_realm(context, my_principal, realm);
-        if (retval) {
-            com_err(progname, errno,
-                    _("while setting client principal realm"));
-            exit(1);
-        }
-    } else if (krb5_is_referral_realm(krb5_princ_realm(context,
-                                                       my_principal))) {
-        /* We're going to use this as a client principal, so it can't have the
-         * referral realm.  Use the default realm instead. */
-        retval = krb5_get_default_realm(context, &def_realm);
-        if (retval) {
-            com_err(progname, errno, _("while getting default realm"));
-            exit(1);
-        }
-        retval = krb5_set_principal_realm(context, my_principal, def_realm);
-        if (retval) {
-            com_err(progname, errno,
-                    _("while setting client principal realm"));
-            exit(1);
-        }
-    }
 
 #if 0
     krb5_princ_type(context, my_principal) = KRB5_NT_PRINCIPAL;
@@ -248,22 +267,13 @@ void get_tickets(context)
      * Construct the principal name for the slave host.
      */
     memset(&creds, 0, sizeof(creds));
-    retval = krb5_sname_to_principal(context,
-                                     slave_host, KPROP_SERVICE_NAME,
-                                     KRB5_NT_SRV_HST, &creds.server);
+    retval = sn2princ_with_realm(context, slave_host, KPROP_SERVICE_NAME,
+                                 KRB5_NT_SRV_HST, realm, &creds.server);
     if (retval) {
         com_err(progname, errno, _("while setting server principal name"));
         (void) krb5_cc_destroy(context, ccache);
         exit(1);
     }
-    if (realm) {
-        retval = krb5_set_principal_realm(context, creds.server, realm);
-        if (retval) {
-            com_err(progname, errno,
-                    _("while setting server principal realm"));
-            exit(1);
-        }
-    }
 
     /*
      * Now fill in the client....
diff --git a/src/slave/kpropd.c b/src/slave/kpropd.c
index f70ec5b..bb0c50c 100644
--- a/src/slave/kpropd.c
+++ b/src/slave/kpropd.c
@@ -102,7 +102,6 @@ extern int daemon(int, int);
 #define SYSLOG_CLASS LOG_DAEMON
 #define INITIAL_TIMER 10
 
-char *def_realm = NULL;
 int runonce = 0;
 
 /*
@@ -141,6 +140,7 @@ krb5_principal  client;         /* This is who we're talking to */
 krb5_context kpropd_context;
 krb5_auth_context auth_context;
 char    *realm = NULL;          /* Our realm */
+static char *def_realm = NULL; /* Ref pointer for default realm */
 char    *file = KPROPD_DEFAULT_FILE;
 char    *temp_file_name;
 char    *kdb5_util = KPROPD_DEFAULT_KDB5_UTIL;
@@ -610,6 +610,34 @@ full_resync(CLIENT *clnt)
     return (status == RPC_SUCCESS) ? &clnt_res : NULL;
 }
 
+/* Runs krb5_sname_to_principal with a substitute realm.
+ * Duplicated in kprop.c, sharing TBD */
+static krb5_error_code
+sn2princ_with_realm(krb5_context context, const char *hostname,
+                    const char *sname, krb5_int32 type, const char *rrealm,
+                    krb5_principal *princ_out)
+{
+    krb5_error_code ret;
+    krb5_principal princ = NULL;
+
+    *princ_out = NULL;
+
+    if (rrealm == NULL)
+        return EINVAL;
+
+    ret = krb5_sname_to_principal(context, hostname, sname, type, &princ);
+    if (ret)
+        return ret;
+
+    ret = krb5_set_principal_realm(context, princ, rrealm);
+    if (ret) {
+        krb5_free_principal(context, princ);
+        return ret;
+    }
+
+    *princ_out = princ;
+    return 0;
+}
 /*
  * Routine to handle incremental update transfer(s) from master KDC
  */
@@ -645,29 +673,14 @@ krb5_error_code do_iprop(kdb_log_context *log_ctx)
     if (pollin < 10)
         pollin = 10;
 
-    /*
-     * Grab the realm info and check if iprop is enabled.
-     */
-    if (def_realm == NULL) {
-        retval = krb5_get_default_realm(kpropd_context, &def_realm);
-        if (retval) {
-            com_err(progname, retval,
-                    _("Unable to get default realm"));
-            exit(1);
-        }
-    }
-
-    params.mask |= KADM5_CONFIG_REALM;
-    params.realm = def_realm;
-
     if (master_svc_princstr == NULL) {
         if ((retval = kadm5_get_kiprop_host_srv_name(kpropd_context,
-                                                     def_realm,
+                                                     realm,
                                                      &master_svc_princstr))) {
             com_err(progname, retval,
                     _("%s: unable to get kiprop host based "
                       "service name for realm %s\n"),
-                    progname, def_realm);
+                    progname, realm);
             exit(1);
         }
     }
@@ -682,31 +695,18 @@ krb5_error_code do_iprop(kdb_log_context *log_ctx)
         exit(1);
     }
 
-    retval = krb5_sname_to_principal(kpropd_context, NULL, KIPROP_SVC_NAME,
-                                     KRB5_NT_SRV_HST, &iprop_svc_principal);
+    retval = sn2princ_with_realm(kpropd_context, NULL, KIPROP_SVC_NAME,
+                                 KRB5_NT_SRV_HST, realm, &iprop_svc_principal);
     if (retval) {
         com_err(progname, retval,
                 _("while trying to construct host service principal"));
         exit(1);
     }
 
-    /* XXX referrals? */
-    if (krb5_is_referral_realm(krb5_princ_realm(kpropd_context,
-                                                iprop_svc_principal))) {
-        krb5_data *r = krb5_princ_realm(kpropd_context,
-                                        iprop_svc_principal);
-        assert(def_realm != NULL);
-        r->length = strlen(def_realm);
-        r->data = strdup(def_realm);
-        if (r->data == NULL) {
-            com_err(progname, retval,
-                    _("while determining local service principal name"));
-            exit(1);
-        }
-        /* XXX Memory leak: Old r->data value.  */
-    }
-    if ((retval = krb5_unparse_name(kpropd_context, iprop_svc_principal,
-                                    &iprop_svc_princstr))) {
+            
+    retval = krb5_unparse_name(kpropd_context, iprop_svc_principal,
+                               &iprop_svc_princstr);
+    if (retval) {
         com_err(progname, retval,
                 _("while canonicalizing principal name"));
         krb5_free_principal(kpropd_context, iprop_svc_principal);
@@ -1169,25 +1169,33 @@ void PRS(argv)
         openlog("kpropd", LOG_PID | LOG_ODELAY, SYSLOG_CLASS);
         set_com_err_hook(kpropd_com_err_proc);
     }
+
+    if (realm == NULL) {
+        retval = krb5_get_default_realm(kpropd_context, &def_realm);
+        if (retval) {
+            com_err(progname, retval, _("Unable to get default realm"));
+            exit(1);
+        }
+        realm = def_realm;
+    } else {
+        retval = krb5_set_default_realm(kpropd_context, realm);
+        if (retval) {
+            com_err(progname, retval, _("Unable to set default realm"));
+            exit(1);
+        }
+    }
+
     /*
      * Get my hostname, so we can construct my service name
      */
-    retval = krb5_sname_to_principal(kpropd_context,
-                                     NULL, KPROP_SERVICE_NAME,
-                                     KRB5_NT_SRV_HST, &server);
+    retval = sn2princ_with_realm(kpropd_context, NULL, KPROP_SERVICE_NAME,
+                                 KRB5_NT_SRV_HST, realm, &server);
     if (retval) {
         com_err(progname, retval,
                 _("while trying to construct my service name"));
         exit(1);
     }
-    if (realm) {
-        retval = krb5_set_principal_realm(kpropd_context, server, realm);
-        if (retval) {
-            com_err(progname, errno,
-                    _("while constructing my service realm"));
-            exit(1);
-        }
-    }
+
     /*
      * Construct the name of the temporary file.
      */
@@ -1197,6 +1205,8 @@ void PRS(argv)
         exit(1);
     }
 
+    params.realm = realm;
+    params.mask |= KADM5_CONFIG_REALM;
     retval = kadm5_get_config_params(kpropd_context, 1, &params, &params);
     if (retval) {
         com_err(progname, retval, _("while initializing"));
-- 
2.9.3

